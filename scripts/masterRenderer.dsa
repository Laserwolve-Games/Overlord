var oContentMgr = App.getContentMgr();
var oScriptArgs = JSON.parse(App.scriptArgs[0]);
var nTotalNumberOfInstances = oScriptArgs['num_instances'];
var sMasterTemplatePath = oScriptArgs['template_path'];
var oScriptFileInfo = new DzFileInfo(getScriptFileName());
var sScriptPath = oScriptFileInfo.path();
var nInstanceNumber = App.instanceName();
var sOutputDirectory = oScriptArgs['image_output_dir'];
var oOutputDirectory = new DzDir(sOutputDirectory);
var aSetFilepaths = oScriptArgs['source_sets'].toString().split(',');
var nDEGREES_IN_CIRCLE = 360;
var nFrameRate = oScriptArgs['frame_rate'];
var nDAZ_TICKS = 4800;
var nTicksPerFrame = nDAZ_TICKS / nFrameRate;
var bOverwriteExistingImages = false;
var oRenderMgr;
var oIrayOptions;
var oEnvironmentOptionsPropertyGroups;
var oRenderOptions;
var oActiveCanvasProperty;
var oDrawGroundProperty;
var oEnvironmentModeProperty;
var oRoot;
var oShadowPlane;

function getName(sFileName) // Obtain the desired name out of a filepath or filename.
{
	return sFileName.split('/').pop().split('_')[0];
}
function setMatte(oSubject, bBool) // Set the Matte Parameter of a subject and its children.
{
	if (oSubject.matteParameter) oSubject.matteParameter.setValue(bBool);

	for (var nChildCounter = 0; nChildCounter != oSubject.children.length; nChildCounter++) {

		var oChild = oSubject.children[nChildCounter];
		oChild.matteParameter = oChild.findPropertyByLabel('Enable Iray Matte');
		if (oChild.matteParameter) oChild.matteParameter.setValue(bBool);
	}
}
function renderCore(sSubjectName, sAnimationName, bIsGear, bIsShadow) {

	oSubject.children = oSubject.getNodeChildren(true);
	oSubject.matteParameter = oSubject.findPropertyByLabel('Enable Iray Matte');

	// These variables have to be determined when we start rendering
	oRenderMgr = App.getRenderMgr();
	oIrayOptions = oRenderMgr.getRenderElementObjects()[1];
	oEnvironmentOptionsPropertyGroups = oRenderMgr.getRenderElementObjects()[3].getPropertyGroups();
	oRenderOptions = oRenderMgr.getRenderOptions();
	oActiveCanvasProperty = oIrayOptions.getPropertyGroups().findProperty('Active Canvas');
	oDrawGroundProperty = oEnvironmentOptionsPropertyGroups.findProperty('Draw Ground');
	oEnvironmentModeProperty = oEnvironmentOptionsPropertyGroups.findProperty('Environment Mode');
	oRoot = Scene.findNodeByLabel('root');
	oShadowPlane = Scene.findNodeByLabel('shadowPlane');

	{ // Read the subject's JSON to see how many angles it has

		var oSubjectFile = new DzFile(sSubjectFilepath);
		var nAngles = 16;

		oSubjectFile.open(DzFile.ReadOnly);

		var nAnglesFromJson = JSON.parse(oSubjectFile.read()).asset_info.angles;

		oSubjectFile.close();

		if (nAnglesFromJson) nAngles = nAnglesFromJson;
		else App.warning('Number of angles not found in the JSON for ' + sSubjectFilepath +
			'. Using default of value of ' + nAngles + ' angles.');

		var nDegrees = nDEGREES_IN_CIRCLE / nAngles;
	}
	
	if (sAnimationName != 'static') { // Read the animation's JSON to see how many frames it has
		// https://github.com/Laserwolve-Games/Overlord/discussions/4 
		var oAnimationFile = new DzFile(sAnimationFilepath);

		oAnimationFile.open(DzFile.ReadOnly);
		var oAnimationsJson = JSON.parse(oAnimationFile.read()).scene.animations;
		oAnimationFile.close();

		for (var i = 0; i < oAnimationsJson.length; i++) {

			var nNumberOfFrames = oAnimationsJson[i].keys.length;

			if (nNumberOfFrames > 1) {

				// Subtract 1 here to make it 0-based
				Scene.setAnimRange(DzTimeRange(0, (nNumberOfFrames - 1) * nTicksPerFrame));

				break;
			}
		}
	} else Scene.setAnimRange(DzTimeRange(0, 0));

	if (bIsGear) {

		oIrayOptions.addNodeToNodeList('visibleNodes', oGear); // Add the gear to the canvas.

		// Add all gear children to the canvas as well.
		for (var nGearChildrenCounter = 0; nGearChildrenCounter != aGearChildren.length; nGearChildrenCounter++)
			oIrayOptions.addNodeToNodeList('visibleNodes', aGearChildren[nGearChildrenCounter]);
	}

	// Add the subject as a child to the root
	oRoot.addNodeChild(oSubject, true);

	// variables that have to be determined when we start rendering
	var nFramesTotal = Scene.getPlayRange().end / nTicksPerFrame;

	for (var nAngle = 0; nAngle != nDEGREES_IN_CIRCLE; nAngle = nAngle + nDegrees) // Loop through each angle...
	{
		var nOutputAngle = 90 - nAngle;
		if (nOutputAngle <= -180) nOutputAngle += 360;

		for (var nFrame = 0; nFrame <= nFramesTotal; nFrame++) // Loop through each frame...
		{
			// Check if the current Daz istance should render this frame.
			if ((nFrame - (nInstanceNumber - 1)) % nTotalNumberOfInstances != 0) continue;

			// Example: C:\Users\Andrew\Downloads\output\goblinWarlock\attack\attack_90\attack90_004.png
			var sFinalFilePath = sOutputDirectory + '/' + sSubjectName + (bIsShadow ? '_shadow' : '') + '/' + sAnimationName
			+ '/' + sAnimationName + '_' + nOutputAngle + '/' + sAnimationName + '_' + nOutputAngle + '_' + ('000' + nFrame).slice(-3) + '.png';

			// If the image we're going to make already exists and isn't 0 bytes, skip it if we have flagged as such.
			if (oOutputDirectory.exists(sFinalFilePath) && DzFileInfo(sFinalFilePath).size != 0 && !bOverwriteExistingImages) continue;
			oRenderOptions.renderImgFilename = sFinalFilePath; // Set the filepath.

			Scene.setFrame(nFrame);
			oRoot.getYRotControl().setValue(nAngle); // Do this every frame, or else it will interpolate.

			if (bIsShadow) {
				oEnvironmentModeProperty.setValue(3); // Scene Only
				oDrawGroundProperty.setValue(true);
				oShadowPlane.setVisible(true);
				oActiveCanvasProperty.setValue(0);
				if (bIsGear) setMatte(oSubject, true);
			}
			else {
				oEnvironmentModeProperty.setValue(2); // Sun-Sky Only
				oDrawGroundProperty.setValue(false);
				oShadowPlane.setVisible(false);
				setMatte(oSubject, false);
				if (bIsGear) oActiveCanvasProperty.setValue(1);
			}
			while (backgroundProgressIsActive()) processEvents();		// Wait for everything else to finish first, specifically the mesh smoother, then render.
			oRenderMgr.doRender();

			var oCanvasDirectory = DzDir(sFinalFilePath.replace('.png', '_canvases'));

			if (oCanvasDirectory.exists())  // If canvases were made, delete all of them, then delete the canvas folder.
			{
				var aCanvases = oCanvasDirectory.getFilesFromDir(['*.exr'], true);
				for (var i = 0; i != aCanvases.length; i++) oCanvasDirectory.remove(aCanvases[i]);
				oCanvasDirectory.rmdir();
			}
			// Looping through all pixels of the output image would be much slower than checking the file size.
			if (DzFileInfo(sFinalFilePath).size() == 4181) App.warning(sFinalFilePath + ' is 4181 bytes. It is likely a blank image.');
		}
	}
	if (!bIsShadow) renderCore(sSubjectName, sAnimationName, bIsGear, true);
}
for (var nSetFilepathsCounter = 0; nSetFilepathsCounter != aSetFilepaths.length; nSetFilepathsCounter++) {

	var sSetFilepath = aSetFilepaths[nSetFilepathsCounter];
	var oSetDirectory = new DzDir(sSetFilepath);
	var aSubjectFilepaths = oSetDirectory.getFilesFromDir(['*_subject.duf'], false);
	var aAnimationFilepaths = oSetDirectory.getFilesFromDir(['*_animation.duf'], false);
	var aPropAnimationFilepaths = oSetDirectory.getFilesFromDir(['*_propAnimation.duf'], false);
	var aGearFilepaths = oSetDirectory.getFilesFromDir(['*_gear.duf'], false);
	var aGearAnimationFilepaths = oSetDirectory.getFilesFromDir(['*_gearAnimation.duf'], false);

	for (var nSubjectCounter = 0; nSubjectCounter != aSubjectFilepaths.length; nSubjectCounter++) {

			var sSubjectFilepath = aSubjectFilepaths[nSubjectCounter];
			var sSubjectName = getName(sSubjectFilepath);
	
		// If there are animations, loop over them
		if (aAnimationFilepaths.length) for (var nAnimationFilepathsCounter = 0; nAnimationFilepathsCounter != aAnimationFilepaths.length; nAnimationFilepathsCounter++) {
		
			var sAnimationFilepath = aAnimationFilepaths[nAnimationFilepathsCounter];
			var sAnimationName = getName(sAnimationFilepath);
			
			// Start with a blank scene
			oContentMgr.openFile(sMasterTemplatePath, false);

			// Merge in the subject
			oContentMgr.openFile(sSubjectFilepath, true);

			var oSubject = Scene.findNodeByLabel('subject');
			
			oContentMgr.openFile(sAnimationFilepath, true);

			 // If this animation has corresponding animated props, merge them all in
			if (aPropAnimationFilepaths.length) for (var nPropAnimationCounter = 0; nPropAnimationCounter != aPropAnimationFilepaths.length; nPropAnimationCounter++) {

				var sPropAnimationFilepath = aPropAnimationFilepaths[nPropAnimationCounter];
				var sPropAnimationFileName = getName(sPropAnimationFilepath); // walk-LightningOrb
				var sAnimationName = getName(sAnimationFilepath); // walk

				if (sPropAnimationFileName.indexOf(sAnimationName) !== -1) {

					var sNameOfPropToAnimate = sPropAnimationFileName.split('-').pop(); //LightningOrb
					var oProp = Scene.findNodeByLabel(sNameOfPropToAnimate);

					oSubject.select(false);
					oProp.select(true);

					oContentMgr.openFile(sPropAnimationFilepath, true);

					oProp.select(false);
					oSubject.select(true);

				} else continue;
			}
	
			if (aGearFilepaths.length) for (var nGearCounter = 0; nGearCounter != aGearFilepaths.length; nGearCounter++) {
			
				var sGearFilepath = aGearFilepaths[nGearCounter];

				oContentMgr.openFile(sGearFilepath, true);

				var sGearName = getName(sGearFilepath);
				var oGear = Scene.findNodeByLabel('gear');

				var aGearChildren = oGear.getNodeChildren(false);

				renderCore(sSubjectName + '_' + sGearName, sAnimationName, true, false);

				Scene.removeNode(oGear);
			}
			else renderCore(sSubjectName, sAnimationName, false, false);

		} else {

			oContentMgr.openFile(sMasterTemplatePath, false);

			oContentMgr.openFile(sSubjectFilepath, true);

			var oSubject = Scene.findNodeByLabel('subject');

			renderCore(sSubjectName, 'static', false, false);
		}
	}
}

App.delayedExit();